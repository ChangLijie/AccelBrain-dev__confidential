name: Release AccelBrain

on:
  workflow_dispatch:

jobs:
  build-and-zip:

    runs-on: self-hosted

    steps:
      - name: Install dependencies
        run: |

          # 檢查是否有 python3 / pip3 / zip / git 等，沒有才安裝
          if ! command -v python3 >/dev/null; then apt-get install -y python3; fi
          if ! command -v pip3 >/dev/null; then apt-get install -y python3-pip; fi
          if ! command -v zip >/dev/null; then apt-get install -y zip; fi
          if ! command -v git >/dev/null; then apt-get install -y git; fi
          if ! dpkg -s python3-tk >/dev/null 2>&1; then apt-get install -y python3-tk; fi

          # 檢查 PyInstaller 是否已安裝
          if ! pip3 show pyinstaller >/dev/null 2>&1; then pip3 install --upgrade pip && pip3 install pyinstaller; fi


      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract latest CHANGELOG entry and version
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(awk 'BEGIN {print_section=0;} /^## \[/ {if (print_section == 0) {print_section=1;} else {exit;}} print_section {print;}' CHANGELOG.md)
          VERSION=$(echo "$CHANGELOG_CONTENT" | grep -oP '(?<=## \[)[^]]+')
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build executables with PyInstaller
        run: |
          pyinstaller launch.py --name AccelBrainLauncher --onefile --clean --distpath .
          pyinstaller port_setting.py --name Setting --onefile --clean --distpath .
          pyinstaller shut_down.py --name ShutDown --onefile --clean --distpath .

      - name: Prepare release zip
        run: |
          mkdir release
          cp AccelBrainLauncher Setting ShutDown run_compose.sh run.sh stop.sh docker-compose.yml CHANGELOG.md README.md release/
          cp -r setting release/
          zip -r release-ubuntu.zip release/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-ubuntu
          path: release-ubuntu.zip

  create-release:
    needs: build-and-zip
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract latest CHANGELOG entry and version
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(awk 'BEGIN {print_section=0;} /^## \[/ {if (print_section == 0) {print_section=1;} else {exit;}} print_section {print;}' CHANGELOG.md)
          VERSION=$(echo "$CHANGELOG_CONTENT" | grep -oP '(?<=## \[)[^]]+')
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          name: ${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.content }}
          files: |
            artifacts/release-ubuntu/release-ubuntu.zip
            
